"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[5737],{3905:(n,e,t)=>{t.d(e,{Zo:()=>m,kt:()=>d});var o=t(67294);function s(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){s(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,o,s=function(n,e){if(null==n)return{};var t,o,s={},r=Object.keys(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||(s[t]=n[t]);return s}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(s[t]=n[t])}return s}var p=o.createContext({}),c=function(n){var e=o.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},m=function(n){var e=c(n.components);return o.createElement(p.Provider,{value:e},n.children)},l={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},u=o.forwardRef((function(n,e){var t=n.components,s=n.mdxType,r=n.originalType,p=n.parentName,m=i(n,["components","mdxType","originalType","parentName"]),u=c(t),d=s,y=u["".concat(p,".").concat(d)]||u[d]||l[d]||r;return t?o.createElement(y,a(a({ref:e},m),{},{components:t})):o.createElement(y,a({ref:e},m))}));function d(n,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var r=t.length,a=new Array(r);a[0]=u;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=n,i.mdxType="string"==typeof n?n:s,a[1]=i;for(var c=2;c<r;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},25893:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=t(87462),s=(t(67294),t(3905));const r={title:'Configurations for building "Open Source Benchmark" GPTs',description:"This blog contains all the configurations while building OSS Comparison GPTs.",date:new Date("2023-12-11T00:00:00.000Z"),authors:["sykp241095","chatgpt"],tags:["openai","chatgpt","gpts"]},a=void 0,i={permalink:"/blog/how-to-build-oss-comparison-gpt",editUrl:"https://github.com/pingcap/ossinsight/edit/main/web/blog/how-to-build-oss-comparison-gpt/index.mdx",source:"@site/blog/how-to-build-oss-comparison-gpt/index.mdx",title:'Configurations for building "Open Source Benchmark" GPTs',description:"This blog contains all the configurations while building OSS Comparison GPTs.",date:"2023-12-11T00:00:00.000Z",formattedDate:"December 11, 2023",tags:[{label:"openai",permalink:"/blog/tags/openai"},{label:"chatgpt",permalink:"/blog/tags/chatgpt"},{label:"gpts",permalink:"/blog/tags/gpts"}],readingTime:17.155,hasTruncateMarker:!1,authors:[{name:"sykp241095",title:"Contributor of TiDB Community",url:"https://twitter.com/sykp241095",imageURL:"https://github.com/sykp241095.png",key:"sykp241095"},{name:"ChatGPT",title:"Robot from OpenAI",url:"https://chat.openai.com/",imageURL:"https://github.com/openai.png",key:"chatgpt"}],frontMatter:{title:'Configurations for building "Open Source Benchmark" GPTs',description:"This blog contains all the configurations while building OSS Comparison GPTs.",date:"2023-12-11T00:00:00.000Z",authors:["sykp241095","chatgpt"],tags:["openai","chatgpt","gpts"]},nextItem:{title:"How to Learn SQL Easily by Visualizing with ChatGPT",permalink:"/blog/how-to-learn-sql-easily-by-visualizing-with-chatgpt"}},p={authorsImageUrls:[void 0,void 0]},c=[{value:"GPTs Configurations",id:"gpts-configurations",level:2},{value:"Name",id:"name",level:3},{value:"Description",id:"description",level:3},{value:"Instructions",id:"instructions",level:3},{value:"Conversation starters",id:"conversation-starters",level:3},{value:"Capabilities",id:"capabilities",level:3},{value:"Actions",id:"actions",level:3},{value:"Action 1: Config API of next.ossinsight.io for drawing star historical chart",id:"action-1-config-api-of-nextossinsightio-for-drawing-star-historical-chart",level:4},{value:"Schema",id:"schema",level:5},{value:"Privacy policy",id:"privacy-policy",level:5},{value:"Action 2: Config api.github.com for fetching basic info of a repository",id:"action-2-config-apigithubcom-for-fetching-basic-info-of-a-repository",level:4},{value:"Schema:",id:"schema-1",level:5},{value:"Privacy policy",id:"privacy-policy-1",level:5},{value:"Action 3: Stargazer&#39;s geo &amp; company distribution provided by TiDB Serverless Data Service",id:"action-3-stargazers-geo--company-distribution-provided-by-tidb-serverless-data-service",level:4},{value:"Schema URL to import",id:"schema-url-to-import",level:5},{value:"API Key",id:"api-key",level:5},{value:"Privacy policy",id:"privacy-policy-2",level:5}],m={toc:c};function l(n){let{components:e,...t}=n;return(0,s.kt)("wrapper",(0,o.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In this blog, we will share every configurations to build a OSS Comparison GPT."),(0,s.kt)("h2",{id:"gpts-configurations"},"GPTs Configurations"),(0,s.kt)("h3",{id:"name"},"Name"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Open Source Benchmark\n")),(0,s.kt)("h3",{id:"description"},"Description"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Compare open-source softwares\n")),(0,s.kt)("h3",{id:"instructions"},"Instructions"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"You are a data analysis expert. \nWhen a user inputs one or more  open-source software/technology terms, you provide a comprehensive comparison of their data, \nsuch as popularity, GitHub stars count, contributors count, user geographical distribution, stargazers company distribution,  Hacker News keyword mention counts, \nlong-term trend data, and more. You can utilize any available data about the object in question, estimate or obtain it through a search engine or API interface. \nCurrently, you have the following APIs at your disposal:\n\n1. GitHub API for getting repo basic info\n2. OSS Insight API for star history and stargazer's distribution\n3. Hackernews mentions per_year API\n4. OSS Insight star history chart API (show me with a <img> label)\n5. OSS Insight API for  stargazers company distribution\n\nHere's a step-by-step process:\n\nIdentify which API to use based on the data you need.\n- you goal is to think more metrics according exist API.\n- each step you output your thought\n- your action\n- at least 8 metrics you should give\nOutput the data in a markdown table for easy comparison. add your known metrics for more insight. at least 8 metrics.\n\n| Dimension      | A           | B           |\n|----------------|-------------|-------------|\n| Dimension 1    | Detail A1   | Detail B1   |\n| Dimension 2    | Detail A2   | Detail B2   |\n| Dimension 3    | Detail A3   | Detail B3   |\n| ...            | ...         | ...         |\n| Dimension N    | Detail AN   | Detail BN   |\n\n- For star history data, you should generate a line chart using oss insight star history api, at least one chart.\n- For stargazers company data, you use markdown table:\n| Company         | Stargazers Count |\n|-----------------|------------------|\n| Company A       | 100              |\n| Company B       | 75               |\n| Company C       | 50               |\n| Company D       | 30               |\n| Other/Unknown   | 45               |\n\nProvide insights and analysis based on the collected data. and trending insight.\nBe sure to think big! Always give plan and explain what you do.\n\nLet's begin\n\nPlan:\nTools:\nAction:\nOutput:\nDeep Insight:\n\nAt the end, you should give use some surprise, you can search stackshare.io for more info, and continue guiding the users to compare more pair of oss tools.\n")),(0,s.kt)("h3",{id:"conversation-starters"},"Conversation starters"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"PyTorch vs TensorFlow\nTiDB vs Vitess\nReact vs Vue\nGolang vs Rust-lang\n")),(0,s.kt)("h3",{id:"capabilities"},"Capabilities"),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"Make all these three capabilities checked")),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Web Browsing"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","DALL-E Image Generation"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Code Interpreter")),(0,s.kt)("h3",{id:"actions"},"Actions"),(0,s.kt)("h4",{id:"action-1-config-api-of-nextossinsightio-for-drawing-star-historical-chart"},"Action 1: Config API of next.ossinsight.io for drawing star historical chart"),(0,s.kt)("h5",{id:"schema"},"Schema"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"openapi: 3.0.0\ninfo:\n  title: OSS Insight star history chart API\n  version: 1.0.0\n  description: OSS Insight star history chart API.\nservers:\n  - url: https://next.ossinsight.io\npaths:\n  /widgets/official/analyze-repo-stars-history/manifest.json:\n    get:\n      operationId: Star History\n      summary: Retrieve repository star history analysis\n      description: Fetches the star history and analysis for specified repositories.\n      parameters:\n        - name: repo_id\n          in: query\n          required: true\n          description: The ID of the primary repository.\n          schema:\n            type: integer\n        - name: vs_repo_id\n          in: query\n          required: true\n          description: The ID of the repository to compare with.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successful response with star history data.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  imageUrl:\n                    type: string\n                    format: uri\n                    description: URL of the thumbnail image.\n                  title:\n                    type: string\n                    description: Title of the analysis.\n                  description:\n                    type: string\n                    description: Description of the analysis.\n        '400':\n          description: Bad request - parameters missing or invalid.\n        '404':\n          description: Resource not found.\n        '500':\n          description: Internal server error.\n")),(0,s.kt)("h5",{id:"privacy-policy"},"Privacy policy"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"https://www.pingcap.com/privacy-policy/\n")),(0,s.kt)("h4",{id:"action-2-config-apigithubcom-for-fetching-basic-info-of-a-repository"},"Action 2: Config api.github.com for fetching basic info of a repository"),(0,s.kt)("p",null,"As GitHub API use ",(0,s.kt)("inlineCode",{parentName:"p"},"Personal Access Token")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Bearer")," type of authentication for authentication, you should create one in: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/settings/tokens"},"https://github.com/settings/tokens"),", it will be used later."),(0,s.kt)("h5",{id:"schema-1"},"Schema:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"openapi: 3.0.0\ninfo:\n  title: GitHub Repository Info API\n  description: An API for retrieving information about GitHub repositories.\n  version: 1.0.0\nservers:\n  - url: https://api.github.com\n    description: GitHub API Server\npaths:\n  /repos/{owner}/{repo}:\n    get:\n      summary: Get Repository Info\n      description: Retrieve information about a GitHub repository.\n      operationId: getRepositoryInfo\n      parameters:\n        - name: owner\n          in: path\n          required: true\n          schema:\n            type: string\n          description: The username or organization name of the repository owner.\n        - name: repo\n          in: path\n          required: true\n          schema:\n            type: string\n          description: The name of the repository.\n      responses:\n        '200':\n          description: Successful response with repository information.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  name:\n                    type: string\n                  full_name:\n                    type: string\n                  owner:\n                    type: object\n                    properties:\n                      login:\n                        type: string\n                      id:\n                        type: integer\n                      avatar_url:\n                        type: string\n                      html_url:\n                        type: string\n                  private:\n                    type: boolean\n                  description:\n                    type: string\n                  fork:\n                    type: boolean\n                  url:\n                    type: string\n                  html_url:\n                    type: string\n                  language:\n                    type: string\n                  forks_count:\n                    type: integer\n                  stargazers_count:\n                    type: integer\n                  watchers_count:\n                    type: integer\n                  size:\n                    type: integer\n                  default_branch:\n                    type: string\n                  open_issues_count:\n                    type: integer\n                  topics:\n                    type: array\n                    items:\n                      type: string\n                  has_issues:\n                    type: boolean\n                  has_projects:\n                    type: boolean\n                  has_wiki:\n                    type: boolean\n                  has_pages:\n                    type: boolean\n                  has_downloads:\n                    type: boolean\n                  has_discussions:\n                    type: boolean\n                  archived:\n                    type: boolean\n                  disabled:\n                    type: boolean\n                  visibility:\n                    type: string\n                  pushed_at:\n                    type: string\n                    format: date-time\n                  created_at:\n                    type: string\n                    format: date-time\n                  updated_at:\n                    type: string\n                    format: date-time\n                  license:\n                    type: object\n                    properties:\n                      key:\n                        type: string\n                      name:\n                        type: string\n                      spdx_id:\n                        type: string\n                      url:\n                        type: string\n")),(0,s.kt)("h5",{id:"privacy-policy-1"},"Privacy policy"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement\n")),(0,s.kt)("h4",{id:"action-3-stargazers-geo--company-distribution-provided-by-tidb-serverless-data-service"},"Action 3: Stargazer's geo & company distribution provided by TiDB Serverless Data Service"),(0,s.kt)("h5",{id:"schema-url-to-import"},"Schema URL to import"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"https://us-west-2.prod.aws.tidbcloud.com/api/v1/dataservices/external/appexport/openapi?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBpZCI6ImRhdGFhcHAtUmZGS2NaRnUiLCJjcmVhdGVyIjoiaHVvaGFvQHBpbmdjYXAuY29tIiwic2VuY2UiOiJvcGVuYXBpIn0.xqu-ZCPHozisIHWTD5XM_5t2JWOGVpAejcQeWiTH_Mw\n")),(0,s.kt)("p",null,"or you can use the following details schema."),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Show detailed API schema"),(0,s.kt)("p",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'components:\n  schemas:\n    getGithubRepoStar_historyResponse:\n      properties:\n        data:\n          properties:\n            columns:\n              items:\n                properties:\n                  col:\n                    type: string\n                  data_type:\n                    type: string\n                  nullable:\n                    type: boolean\n                type: object\n              type: array\n            result:\n              properties:\n                code:\n                  format: int64\n                  type: integer\n                end_ms:\n                  format: int64\n                  type: integer\n                latency:\n                  type: string\n                limit:\n                  maximum: 1.8446744073709552e+19\n                  minimum: 0\n                  type: integer\n                message:\n                  type: string\n                row_affect:\n                  format: int64\n                  type: integer\n                row_count:\n                  format: int64\n                  type: integer\n                start_ms:\n                  format: int64\n                  type: integer\n                warn_count:\n                  type: integer\n                warn_messages:\n                  items:\n                    type: string\n                  type: array\n              type: object\n            rows:\n              items:\n                properties:\n                  date:\n                    type: string\n                  stargazers:\n                    type: string\n                required:\n                - date\n                - stargazers\n                type: object\n              type: array\n          required:\n          - columns\n          - rows\n          - result\n          type: object\n        type:\n          type: string\n      required:\n      - type\n      - data\n      type: object\n    getGithubRepoStargazers_companyResponse:\n      properties:\n        data:\n          properties:\n            columns:\n              items:\n                properties:\n                  col:\n                    type: string\n                  data_type:\n                    type: string\n                  nullable:\n                    type: boolean\n                type: object\n              type: array\n            result:\n              properties:\n                code:\n                  format: int64\n                  type: integer\n                end_ms:\n                  format: int64\n                  type: integer\n                latency:\n                  type: string\n                limit:\n                  maximum: 1.8446744073709552e+19\n                  minimum: 0\n                  type: integer\n                message:\n                  type: string\n                row_affect:\n                  format: int64\n                  type: integer\n                row_count:\n                  format: int64\n                  type: integer\n                start_ms:\n                  format: int64\n                  type: integer\n                warn_count:\n                  type: integer\n                warn_messages:\n                  items:\n                    type: string\n                  type: array\n              type: object\n            rows:\n              items:\n                properties:\n                  company_name:\n                    type: string\n                  proportion:\n                    type: string\n                  stargazers:\n                    type: string\n                required:\n                - company_name\n                - stargazers\n                - proportion\n                type: object\n              type: array\n          required:\n          - columns\n          - rows\n          - result\n          type: object\n        type:\n          type: string\n      required:\n      - type\n      - data\n      type: object\n    getGithubRepoStargazers_countryResponse:\n      properties:\n        data:\n          properties:\n            columns:\n              items:\n                properties:\n                  col:\n                    type: string\n                  data_type:\n                    type: string\n                  nullable:\n                    type: boolean\n                type: object\n              type: array\n            result:\n              properties:\n                code:\n                  format: int64\n                  type: integer\n                end_ms:\n                  format: int64\n                  type: integer\n                latency:\n                  type: string\n                limit:\n                  maximum: 1.8446744073709552e+19\n                  minimum: 0\n                  type: integer\n                message:\n                  type: string\n                row_affect:\n                  format: int64\n                  type: integer\n                row_count:\n                  format: int64\n                  type: integer\n                start_ms:\n                  format: int64\n                  type: integer\n                warn_count:\n                  type: integer\n                warn_messages:\n                  items:\n                    type: string\n                  type: array\n              type: object\n            rows:\n              items:\n                properties:\n                  country_code:\n                    type: string\n                  percentage:\n                    type: string\n                  stargazers:\n                    type: string\n                required:\n                - country_code\n                - stargazers\n                - percentage\n                type: object\n              type: array\n          required:\n          - columns\n          - rows\n          - result\n          type: object\n        type:\n          type: string\n      required:\n      - type\n      - data\n      type: object\n    getHackernewsMentions_countResponse:\n      properties:\n        data:\n          properties:\n            columns:\n              items:\n                properties:\n                  col:\n                    type: string\n                  data_type:\n                    type: string\n                  nullable:\n                    type: boolean\n                type: object\n              type: array\n            result:\n              properties:\n                code:\n                  format: int64\n                  type: integer\n                end_ms:\n                  format: int64\n                  type: integer\n                latency:\n                  type: string\n                limit:\n                  maximum: 1.8446744073709552e+19\n                  minimum: 0\n                  type: integer\n                message:\n                  type: string\n                row_affect:\n                  format: int64\n                  type: integer\n                row_count:\n                  format: int64\n                  type: integer\n                start_ms:\n                  format: int64\n                  type: integer\n                warn_count:\n                  type: integer\n                warn_messages:\n                  items:\n                    type: string\n                  type: array\n              type: object\n            rows:\n              items:\n                properties:\n                  count:\n                    type: string\n                required:\n                - count\n                type: object\n              type: array\n          required:\n          - columns\n          - rows\n          - result\n          type: object\n        type:\n          type: string\n      required:\n      - type\n      - data\n      type: object\n    getHackernewsMentions_per_yearResponse:\n      properties:\n        data:\n          properties:\n            columns:\n              items:\n                properties:\n                  col:\n                    type: string\n                  data_type:\n                    type: string\n                  nullable:\n                    type: boolean\n                type: object\n              type: array\n            result:\n              properties:\n                code:\n                  format: int64\n                  type: integer\n                end_ms:\n                  format: int64\n                  type: integer\n                latency:\n                  type: string\n                limit:\n                  maximum: 1.8446744073709552e+19\n                  minimum: 0\n                  type: integer\n                message:\n                  type: string\n                row_affect:\n                  format: int64\n                  type: integer\n                row_count:\n                  format: int64\n                  type: integer\n                start_ms:\n                  format: int64\n                  type: integer\n                warn_count:\n                  type: integer\n                warn_messages:\n                  items:\n                    type: string\n                  type: array\n              type: object\n            rows:\n              items:\n                properties:\n                  count:\n                    type: string\n                  date:\n                    type: string\n                required:\n                - count\n                - date\n                type: object\n              type: array\n          required:\n          - columns\n          - rows\n          - result\n          type: object\n        type:\n          type: string\n      required:\n      - type\n      - data\n      type: object\n  securitySchemes:\n    basicAuth:\n      description: Enter your public key for the username field and private key for\n        the password field\n      scheme: basic\n      type: http\ninfo:\n  description: API Interface for GPT PK Action, response GitHub repo metrics and hackernews\n    mentions count data\n  title: GPT-PK\n  version: 1.0.0\nopenapi: 3.0.3\npaths:\n  /github/repo/star_history:\n    get:\n      description: GitHub repo star history\n      operationId: getGithubRepoStar_history\n      parameters:\n      - description: The time interval of the data points\n        in: query\n        name: per\n        schema:\n          default: month\n          enum:\n          - day\n          - week\n          - month\n          example: month\n          type: string\n      - description: \'The owner of the repo. For example: `pingcap`\'\n        in: query\n        name: owner\n        required: true\n        schema:\n          default: ""\n          example: ""\n          type: string\n      - description: \'The name of the repo. For example: `tidb`\'\n        in: query\n        name: repo\n        required: true\n        schema:\n          default: ""\n          example: ""\n          type: string\n      - description: The start date of the range\n        in: query\n        name: from\n        schema:\n          default: "2000-01-01"\n          example: "2000-01-01"\n          type: string\n      - description: The end date of the range\n        in: query\n        name: to\n        schema:\n          default: "2099-12-31"\n          example: "2099-12-31"\n          type: string\n      responses:\n        "200":\n          content:\n            application/json:\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStar_historyResponse\'\n          description: OK\n        "400":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 400\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: param check failed! {detailed error}\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStar_historyResponse\'\n          description: Bad request\n        "401":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 401\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: auth failed\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStar_historyResponse\'\n          description: Unauthorized request\n        "404":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 404\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: endpoint not found\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStar_historyResponse\'\n          description: The requested resource was not found\n        "405":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 405\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: method not allowed\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStar_historyResponse\'\n          description: The requested method is not supported for the specified resource\n        "408":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 408\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: request timeout\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStar_historyResponse\'\n          description: The server timed out waiting for the request\n        "429":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 429\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: \'The request exceeded the limit of 100 times per apikey\n                      per minute. For more quota, please contact us: https://support.pingcap.com/hc/en-us/requests/new?ticket_form_id=7800003722519\'\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStar_historyResponse\'\n          description: The user has sent too many requests in a given amount of time\n        "500":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 500\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: internal error! {detailed error}\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStar_historyResponse\'\n          description: Internal server error\n      summary: /github/repo/star_history\n      tags:\n      - Default\n  /github/repo/stargazers_company:\n    get:\n      operationId: getGithubRepoStargazers_company\n      parameters:\n      - in: query\n        name: owner\n        schema:\n          default: ""\n          example: ""\n          type: string\n      - in: query\n        name: repo\n        schema:\n          default: ""\n          example: ""\n          type: string\n      - in: query\n        name: from\n        schema:\n          default: "2000-01-01"\n          example: "2000-01-01"\n          type: string\n      - in: query\n        name: to\n        schema:\n          default: "2099-01-01"\n          example: "2099-01-01"\n          type: string\n      responses:\n        "200":\n          content:\n            application/json:\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_companyResponse\'\n          description: OK\n        "400":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 400\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: param check failed! {detailed error}\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_companyResponse\'\n          description: Bad request\n        "401":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 401\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: auth failed\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_companyResponse\'\n          description: Unauthorized request\n        "404":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 404\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: endpoint not found\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_companyResponse\'\n          description: The requested resource was not found\n        "405":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 405\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: method not allowed\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_companyResponse\'\n          description: The requested method is not supported for the specified resource\n        "408":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 408\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: request timeout\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_companyResponse\'\n          description: The server timed out waiting for the request\n        "429":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 429\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: \'The request exceeded the limit of 100 times per apikey\n                      per minute. For more quota, please contact us: https://support.pingcap.com/hc/en-us/requests/new?ticket_form_id=7800003722519\'\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_companyResponse\'\n          description: The user has sent too many requests in a given amount of time\n        "500":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 500\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: internal error! {detailed error}\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_companyResponse\'\n          description: Internal server error\n      summary: /github/repo/stargazers_company\n      tags:\n      - Default\n  /github/repo/stargazers_country:\n    get:\n      description: github repo stargazers country\n      operationId: getGithubRepoStargazers_country\n      parameters:\n      - in: query\n        name: owner\n        schema:\n          default: ""\n          example: ""\n          type: string\n      - in: query\n        name: repo\n        schema:\n          default: ""\n          example: ""\n          type: string\n      - in: query\n        name: from\n        schema:\n          default: "2000-01-01"\n          example: "2000-01-01"\n          type: string\n      - in: query\n        name: to\n        schema:\n          default: "2099-01-01"\n          example: "2099-01-01"\n          type: string\n      - in: query\n        name: exclude_unknown\n        schema:\n          default: "true"\n          example: "true"\n          type: boolean\n      responses:\n        "200":\n          content:\n            application/json:\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_countryResponse\'\n          description: OK\n        "400":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 400\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: param check failed! {detailed error}\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_countryResponse\'\n          description: Bad request\n        "401":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 401\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: auth failed\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_countryResponse\'\n          description: Unauthorized request\n        "404":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 404\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: endpoint not found\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_countryResponse\'\n          description: The requested resource was not found\n        "405":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 405\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: method not allowed\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_countryResponse\'\n          description: The requested method is not supported for the specified resource\n        "408":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 408\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: request timeout\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_countryResponse\'\n          description: The server timed out waiting for the request\n        "429":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 429\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: \'The request exceeded the limit of 100 times per apikey\n                      per minute. For more quota, please contact us: https://support.pingcap.com/hc/en-us/requests/new?ticket_form_id=7800003722519\'\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_countryResponse\'\n          description: The user has sent too many requests in a given amount of time\n        "500":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 500\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: internal error! {detailed error}\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getGithubRepoStargazers_countryResponse\'\n          description: Internal server error\n      summary: /github/repo/stargazers_country\n      tags:\n      - Default\n  /hackernews/mentions_count:\n    get:\n      description: Total counts for keyword in hackernews\n      operationId: getHackernewsMentions_count\n      parameters:\n      - in: query\n        name: keyword\n        schema:\n          default: ""\n          example: ""\n          type: string\n      responses:\n        "200":\n          content:\n            application/json:\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_countResponse\'\n          description: OK\n        "400":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 400\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: param check failed! {detailed error}\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_countResponse\'\n          description: Bad request\n        "401":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 401\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: auth failed\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_countResponse\'\n          description: Unauthorized request\n        "404":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 404\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: endpoint not found\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_countResponse\'\n          description: The requested resource was not found\n        "405":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 405\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: method not allowed\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_countResponse\'\n          description: The requested method is not supported for the specified resource\n        "408":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 408\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: request timeout\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_countResponse\'\n          description: The server timed out waiting for the request\n        "429":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 429\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: \'The request exceeded the limit of 100 times per apikey\n                      per minute. For more quota, please contact us: https://support.pingcap.com/hc/en-us/requests/new?ticket_form_id=7800003722519\'\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_countResponse\'\n          description: The user has sent too many requests in a given amount of time\n        "500":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 500\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: internal error! {detailed error}\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_countResponse\'\n          description: Internal server error\n      summary: /hackernews/mentions_count\n      tags:\n      - Default\n  /hackernews/mentions_per_year:\n    get:\n      description: keyword mentions per year in hackernews\n      operationId: getHackernewsMentions_per_year\n      parameters:\n      - in: query\n        name: keyword\n        schema:\n          default: ""\n          example: ""\n          type: string\n      responses:\n        "200":\n          content:\n            application/json:\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_per_yearResponse\'\n          description: OK\n        "400":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 400\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: param check failed! {detailed error}\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_per_yearResponse\'\n          description: Bad request\n        "401":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 401\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: auth failed\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_per_yearResponse\'\n          description: Unauthorized request\n        "404":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 404\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: endpoint not found\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_per_yearResponse\'\n          description: The requested resource was not found\n        "405":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 405\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: method not allowed\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_per_yearResponse\'\n          description: The requested method is not supported for the specified resource\n        "408":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 408\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: request timeout\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_per_yearResponse\'\n          description: The server timed out waiting for the request\n        "429":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 429\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: \'The request exceeded the limit of 100 times per apikey\n                      per minute. For more quota, please contact us: https://support.pingcap.com/hc/en-us/requests/new?ticket_form_id=7800003722519\'\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_per_yearResponse\'\n          description: The user has sent too many requests in a given amount of time\n        "500":\n          content:\n            application/json:\n              example:\n                data:\n                  columns: []\n                  result:\n                    code: 500\n                    end_ms: 0\n                    latency: ""\n                    limit: 0\n                    message: internal error! {detailed error}\n                    row_affect: 0\n                    row_count: 0\n                    start_ms: 0\n                  rows: []\n                type: sql_endpoint\n              schema:\n                $ref: \'#/components/schemas/getHackernewsMentions_per_yearResponse\'\n          description: Internal server error\n      summary: /hackernews/mentions_per_year\n      tags:\n      - Default\nsecurity:\n- basicAuth: []\nservers:\n- url: https://us-west-2.data.tidbcloud.com/api/v1beta/app/dataapp-RfFKcZFu/endpoint\n')))),(0,s.kt)("h5",{id:"api-key"},"API Key"),(0,s.kt)("p",null,"When config this action, you should input the following encoded api key in ",(0,s.kt)("inlineCode",{parentName:"p"},"Authentication")," -> ",(0,s.kt)("inlineCode",{parentName:"p"},"API Key")," -> ",(0,s.kt)("inlineCode",{parentName:"p"},"Auth Type(Basic)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"QzBTQ0VRNzA6MmJjNjAwYzUtODA0Mi00Yzg4LTkxNTgtMTNiNzdkMDY0OGM5\n")),(0,s.kt)("admonition",{title:"Note!",type:"warning"},(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"Make sure using this key for GPT's learning, thanks~"),(0,s.kt)("li",{parentName:"ul"},"We will revoke this key after a period of time"))),(0,s.kt)("h5",{id:"privacy-policy-2"},"Privacy policy"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"https://www.pingcap.com/privacy-policy/\n")))}l.isMDXComponent=!0}}]);